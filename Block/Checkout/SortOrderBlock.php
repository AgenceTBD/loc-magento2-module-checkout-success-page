<?php

namespace Lof\CheckoutSuccessPage\Block\Checkout;

use Lof\CheckoutSuccessPage\Helper\Data;
use Magento\Authorization\Model\UserContextInterface;
use Magento\Cms\Model\Template\FilterProvider;
use Magento\Customer\Api\CustomerRepositoryInterface;
use Magento\Customer\Model\Session;
use Magento\Framework\App\Http\Context;
use Magento\Framework\View\Element\Template;
use Magento\SalesRule\Api\RuleRepositoryInterface;
use Magento\SalesRule\Model\Coupon;

/**
 * Class SortOrderBlock
 * @package Lof\CheckoutSuccessPage\Block\Checkout
 */
class SortOrderBlock extends Template
{
    /**
     * @var Data
     */
    private $helper;
    /**
     * @var Session
     */
    private $customerSession;
    /**
     * @var \Magento\Checkout\Model\Session
     */
    private $_checkoutSession;
    /**
     * @var FilterProvider
     */
    private $_filterProvider;
    /**
     * @var CustomerRepositoryInterface
     */
    private $customerRepository;
    /**
     * @var Context
     */
    private $httpContext;
    /**
     * @var UserContextInterface
     */
    private $userContext;
    /**
     * @var int|null
     */
    private $customerGroupId;
    /**
     * @var Coupon
     */
    private $couponModel;
    /**
     * @var RuleRepositoryInterface
     */
    private $ruleRepository;

    /**
     * SortOrderBlock constructor.
     * @param Template\Context $context
     * @param Data $helper
     * @param Session $customerSession
     * @param \Magento\Checkout\Model\Session $checkoutSession
     * @param FilterProvider $filterProvider
     * @param CustomerRepositoryInterface $customerRepository
     * @param UserContextInterface $userContext
     * @param Context $httpContext
     * @param Coupon $coupon
     * @param RuleRepositoryInterface $saleRule
     * @param array $data
     */
    public function __construct(
        Template\Context $context,
        Data $helper,
        Session $customerSession,
        \Magento\Checkout\Model\Session $checkoutSession,
        FilterProvider $filterProvider,
        CustomerRepositoryInterface $customerRepository,
        UserContextInterface $userContext,
        Context $httpContext,
        Coupon $coupon,
        RuleRepositoryInterface $saleRule,
        array $data = []
    ) {
        $this->helper = $helper;
        $this->customerSession = $customerSession;
        $this->_checkoutSession = $checkoutSession;
        $this->_filterProvider = $filterProvider;
        $this->customerRepository = $customerRepository;
        $this->userContext = $userContext;
        $this->httpContext = $httpContext;
        $this->couponModel = $coupon;
        $this->ruleRepository = $saleRule;
        parent::__construct($context, $data);
    }

    /**
     * @return string
     */
    public function toHtml()
    {
        if ($this->helper->isEnabled()) {
            return parent::toHtml(); // TODO: Change the autogenerated stub
        }
    }

    /**
     * @return array|mixed
     */
    public function getImageBg()
    {
        return $this->helper->getConfigMessage('back_ground_image');
    }

    /**
     *
     * @throws \Magento\Framework\Exception\LocalizedException
     */
    public function isEnableCouponCode()
    {
        $groupId =  $this->getCustomerGroupId();
        $allowGroup = $this->helper->getConfigCouponCode('enable_customer_group');
        $groups = explode(',', $allowGroup);
        return (in_array($groupId, $groups) && $this->helper->getConfigCouponCode('enabled'));
    }

    /**
     * @return array|mixed
     */
    public function isEnableCmsBlock()
    {
        return $this->helper->getConfigBlock('enabled_cms_block');
    }

    /**
     * @return \Magento\Framework\Phrase|string
     */
    public function getCmsHtml()
    {
        $id = $this->helper->getConfigBlock('cms_block');
        return $this->helper->getCmsBlockContent($id);
    }

    /**
     * @return array|mixed
     */
    public function getCouponName()
    {
        $couponCode = $this->helper->getConfigCouponCode('use_coupon_code');
        $ruleId =  $this->couponModel->loadByCode($couponCode)->getRuleId();
        $rule = $this->ruleRepository->getById($ruleId);
        return $rule->getName();
    }

    /**
     * @return string|null
     * @throws \Magento\Framework\Exception\LocalizedException
     * @throws \Magento\Framework\Exception\NoSuchEntityException
     */
    public function getCouponDescription()
    {
        $couponCode = $this->helper->getConfigCouponCode('use_coupon_code');
        $ruleId =  $this->couponModel->loadByCode($couponCode)->getRuleId();
        $rule = $this->ruleRepository->getById($ruleId);
        return $rule->getDescription();
    }

    public function getCouponCode()
    {
        return $this->helper->getConfigCouponCode('use_coupon_code');
    }

    /**
     * @return array|mixed
     */
    public function getCustomBlock()
    {
        return $this->helper->getConfigBlock('custom_block');
    }

    /**
     * @return array|mixed
     */
    public function isEnableCustomBlock()
    {
        return $this->helper->getConfigBlock('enable_custom_block');
    }

    /**
     * Prepare HTML content
     *
     * @return string
     */
    public function getCmsFilterContent($value='')
    {
        $html = $this->_filterProvider->getPageFilter()->filter($value);
        return $html;
    }

    /**
     * @return array|mixed
     */
    public function getCouponCodeLabel()
    {
        return $this->helper->getConfigCouponCode('description');
    }

    /**
     * @return array|mixed
     */
    public function getCmsBlockSortOrder()
    {
        return $this->helper->getConfigBlock('sort_order_cms_block');
    }

    /**
     * @return array|mixed
     */
    public function getCustomBlockSortOrder()
    {
        return $this->helper->getConfigBlock('sort_order_custom_block');
    }


    /**
     * @return array|mixed
     */
    public function getOrderSortOrder()
    {
        return $this->helper->getConfigOrder('sort_order');
    }

    /**
     * @return array|mixed
     */
    public function getSubscriptSortOrder()
    {
        return $this->helper->getConfigSubscript('sort_order');
    }


    /**
     * @return array|mixed
     */
    public function getCouponSortOrder()
    {
        return $this->helper->getConfigCouponCode('sort_order');
    }

    /**
     * Retrieves customer group of the user.
     *
     * @return int
     * @throws \Magento\Framework\Exception\LocalizedException
     */
    public function getCustomerGroupId()
    {
        if ($this->customerGroupId === null) {
            $customerId = $this->getCustomerId();
            if ($customerId) {
                try {
                    $customer = $this->customerRepository->getById($customerId);
                    $this->customerGroupId = $customer->getGroupId();
                } catch (\Magento\Framework\Exception\NoSuchEntityException $e) {
                }
            } else {
                $this->customerGroupId = $this->httpContext->getValue(\Magento\Customer\Model\Context::CONTEXT_GROUP);
            }
            if ($this->customerGroupId === null) {
                $this->customerGroupId = \Magento\Customer\Api\Data\GroupInterface::NOT_LOGGED_IN_ID;
            }
        }
        return $this->customerGroupId;
    }

    /**
     * Returns customer id.
     *
     * @return int|null
     */
    public function getCustomerId()
    {
        return $this->userContext->getUserId();
    }
}
